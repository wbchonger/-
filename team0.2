#include "game.h"
#include "ui_game.h"


//extern
int occurrences=5;//游戏出现的最大限制变量
//extern
int timeinterval=4;//图片刷新时间变量
//extern int Max_error ;//玩家失误的最多次数变量
//extern
int Gametime=3;//游戏倒计时时间变量
//extern int Score_victory;//玩家胜利得分变量

game::game(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::game)
{
    ui->setupUi(this);
//    this->setWindowIcon(QIcon(":/res/tudoulove.jpg"));//窗口icon
    this->setWindowIcon(QIcon(":/res/game.jpg"));//窗口icon
    this->setWindowTitle ("游戏界面");//窗口文字标题

//    Players_score = 0;//初始化玩家得分为0
//    Players_error= Max_error;//初始化玩家最大失误次数等于设置好的Max_error变量
    time_over = Gametime*30;//游戏结束倒计时变量等于设置的Gametime_minutes*60，一分钟60秒
    players=0;
    profit=0;
    rank=150;

    Lable_init();//初始gameworid游戏界面中的所有label控件
    ReFreshImage_1();//刷新label中的图片，使得所有label的图片都为空

    timeinterval_id = startTimer(1000*timeinterval);//开启Qt定时器图片刷新间隔
    countdown_id =startTimer(1000);//开启Qt定时器每秒钟刷新时间显示
    gametime_id =startTimer(time_over*1000);//开启Qt定时器开启Qt定时器


    time_month=1;
    time_day=1;
    ui->month->display(time_month);
    ui->day->display (time_day);//开启游戏倒计时显示
//    ui->fault->display (Players_error);//开启玩家错误显示
//    ui->playscore->display (Players_score);//开启玩家分数显示

    ui->players->display (players);//开启玩家人数显示
    ui->profit ->display (profit);//开启充值总额显示
    ui->rank   ->display (rank);//开启畅销排行显示

}

game::~game()
{
    delete ui;
}

void game::on_close_clicked()
{
    this->close();
    delete this;
}

/********************************************
函数名：Lable_init()
入口参数：无
出口参数：无
功能：初始game游戏界面中的所有label控件，
使插入的图片可以自动按照比例调整大小适应Lable控件。
**********************************************/
void game::Lable_init()
{
    ui->label->setScaledContents(true);
    ui->label_2->setScaledContents(true);
    ui->label_3->setScaledContents(true);
    ui->label_4->setScaledContents(true);
    ui->label_5->setScaledContents(true);
    ui->label_6->setScaledContents(true);
    ui->label_7->setScaledContents(true);
    ui->label_8->setScaledContents(true);
    ui->label_9->setScaledContents(true);
    ui->label_10->setScaledContents(true);
    ui->label_11->setScaledContents(true);
    ui->label_12->setScaledContents(true);
    ui->label_13->setScaledContents(true);
    ui->label_14->setScaledContents(true);
    ui->label_15->setScaledContents(true);
    ui->label_16->setScaledContents(true);
    ui->label_17->setScaledContents(true);
    ui->label_18->setScaledContents(true);
    ui->label_19->setScaledContents(true);
    ui->label_20->setScaledContents(true);
    ui->label_21->setScaledContents(true);
    ui->label_22->setScaledContents(true);
    ui->label_23->setScaledContents(true);
    ui->label_24->setScaledContents(true);
    ui->label_25->setScaledContents(true);
    ui->label_26->setScaledContents(true);
    ui->label_27->setScaledContents(true);
    ui->label_28->setScaledContents(true);
    ui->label_29->setScaledContents(true);
    ui->label_30->setScaledContents(true);
    ui->label_31->setScaledContents(true);
    ui->label_32->setScaledContents(true);
    ui->label_33->setScaledContents(true);
    ui->label_34->setScaledContents(true);
    ui->label_35->setScaledContents(true);
    ui->label_36->setScaledContents(true);
    ui->label_37->setScaledContents(true);
    ui->label_38->setScaledContents(true);
    ui->label_39->setScaledContents(true);
    ui->label_40->setScaledContents(true);
    ui->label_41->setScaledContents(true);
    ui->label_42->setScaledContents(true);
    ui->label_43->setScaledContents(true);
    ui->label_44->setScaledContents(true);
    ui->label_45->setScaledContents(true);
    ui->label_46->setScaledContents(true);
    ui->label_47->setScaledContents(true);
    ui->label_48->setScaledContents(true);
    ui->label_49->setScaledContents(true);

    ui->label_50->setScaledContents(true);
    ui->label_51->setScaledContents(true);
    ui->label_52->setScaledContents(true);
    ui->label_53->setScaledContents(true);
    ui->label_54->setScaledContents(true);
}

/*******************************************************************
函数名：ReFreshImage_1（）
入口参数：无
出口参数：无
功能：刷新label中的图片，使得所有label的图片都为空
*******************************************************************/
void game::ReFreshImage_1 ()
{
    QObjectList list = ui->groupBox->children();
    QLabel *labelimage;
    QImage *img = new QImage;
    img->load(":/res/5.jpg");
    int i=0;
    foreach (QObject *obj, list)
    {
       labelimage = qobject_cast<QLabel*>(obj);
       if(labelimage)
        {
          labelimage->setPixmap(QPixmap::fromImage(*img));
          lable_flag[i] = false;
           i++;
           //qDebug()<<i;
        }
     }
    img->load(":/res/mycompany.jpg");
    labelimage=qobject_cast<QLabel*>(list.value(25));
    labelimage->setPixmap(QPixmap::fromImage(*img));
    lable_flag[25] =true;
}

/*******************************************************************
函数名：ReFreshImage_2（）
入口参数：int occurrences 其他游戏每次刷新最大的出现数量
出口参数：无
功能：随机刷新label的一部分图片，变成其他游戏，同时记录被刷新的位置。
用bool型lable_flag数组保存记录。
********************************************************************/
void game::ReFreshImage_2(int occurrences)
{
    qsrand(QTime(0,0,0).secsTo(QTime::currentTime()));
    QLabel *labelimage;
    QObjectList list = ui->groupBox->children();
    QImage *img = new QImage;
    img->load(":/res/6.jpg");
    occurrences =  qrand()%occurrences+1;
    for(int i=0; i<occurrences; i++)
     {
        int test =qrand()%50;
        //qDebug()<<test;
        labelimage=qobject_cast<QLabel*>(list.value(test));
        if(labelimage&&test!=25)
        {
           labelimage->setPixmap(QPixmap::fromImage(*img));
           lable_flag[test] =true;
         }
      }
}

/*******************************************************************
函数名：timerEvent( QTimerEvent* ev)
入口参数：无
出口参数：无
功能：Qt定时器执行函数，包含刷新图片函数，游戏失败函数，游戏倒计时显示。
********************************************************************/
void  game::timerEvent ( QTimerEvent* ev)
{
    if( ev->timerId ()== timeinterval_id)
    {
        ReFreshImage_1();
        ReFreshImage_2(occurrences);
    }
    if(ev->timerId () == gametime_id)
    {
        Game_failed();
    }
    if (ev->timerId ()== countdown_id)
    {
        --time_over;
        time_day++;
        time_month+=time_day/31;
        if(time_day>30)
            time_day=time_day%30;
        ui->month->display(time_month);
        ui->day->display (time_day);
    }
}

/*******************************************************************
函数名：Game_failed()
入口参数：无
出口参数：无
功能：当玩家游戏失败出现提示框，让玩家选择是否重新开始游戏，或退到主界面。
********************************************************************/
void game::Game_failed()
{
//    QSoundEffect *login=new QSoundEffect(this);
//    login->setSource(QUrl::fromLocalFile(":/res/gameover.wav"));
//    login->play();

    QString  str = "游戏结束,最终游戏畅销榜排名"+QString::number(rank)+"，是否重新开始游戏";
    if( QMessageBox::question(this,"游戏失败",str,
        QMessageBox::Yes, QMessageBox::No )== QMessageBox::Yes)
        {
            players=0;
            profit=0;
            rank=150;
            time_over = Gametime*30;
            ReFreshImage_1();//刷新label中的图片，使得所有label的图片都为空
            gametime_id =startTimer(time_over*1000);//开启Qt定时器开启Qt定时器
            ui->players->display (players);//开启玩家人数显示
            ui->profit ->display (profit);//开启充值总额显示
            ui->rank   ->display (rank);//开启畅销排行显示

            time_day=1;
            time_month=1;
            ui->month->display(time_month);
            ui->day->display (time_day);
//            ui->day    ->display (time_over);//开启游戏计时显示
        }
        else
        {
           this->close();
        }
}

/*******************************************************************
函数名：ImageSwitcher_1(QLabel *label)
入口参数：QLabel *label (lable控件指针)
出口参数：无
功能：切换传入的label的图片，变成working.jpg，开始拉人
********************************************************************/
void game::ImageSwitcher_1(QLabel *label)
{
    QImage *img = new QImage;
    img->load(":/res/working.jpg");
    label->setPixmap(QPixmap::fromImage(*img));
}

/*******************************************************************
函数名：ImageSwitcher_2(QLabel *label
入口参数：QLabel *label (lable控件指针)
出口参数：无
功能：切换传入的label的图片，变成tudou2.jpg
********************************************************************/

/*******************************************************************
函数名：mousePressEvent(QMouseEvent *)
入口参数：无
出口参数：无
功能：Qt鼠标点击函数,每次鼠标点击以后遍历所有lable控件。
如果有点击的是lable_flag记录为真,则执行Click_right(),ImageSwitcher_1()函数，
发出点击正确的声音和判断是否胜利，并切换图片。
able_flag记录为假，则ImageSwitcher_2()函数，切换图片。
********************************************************************/
void game::mousePressEvent(QMouseEvent *)
{
    QObjectList list = ui->groupBox->children();
    QLabel *labelimage;
    int i=0;
    foreach (QObject *obj, list)
    {
        labelimage = qobject_cast<QLabel*>(obj);
        if(labelimage)
        {
            if(labelimage->geometry().contains(this->mapFromGlobal(QCursor::pos())))
            {
                //qDebug()<<labelimage;
                //qDebug()<<lable_flag[i];
                if(lable_flag[i]==true)
                {
//                    Click_right();
                    ImageSwitcher_1(labelimage);
                    lable_flag[i]=false;
                }
                else
                {
//                    Click_error();
//                    ImageSwitcher_2(labelimage);
                }
            }
        }
        i++;
    }
}

/*******************************************************************
函数名：Click_right()
入口参数：无
出口参数：无
功能：当玩家点击正确时，执行该函数播放正确音效，增加玩家得分并显示，切换图片。
并判断玩家是否获胜。
********************************************************************/
void game::Click_right()
{
    ui->players->display (++players);
//    //音效添加
//    QSoundEffect *login=new QSoundEffect(this);
//    login->setSource(QUrl::fromLocalFile(":/res/Clickright.wav"));
//    login->play();
//    if(Players_score == Score_victory )
    {
//        Game_victory();
    }
}
